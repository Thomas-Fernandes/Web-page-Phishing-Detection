1 - sum(tabac$probleme_pulmonaire) / nrow(tabac), sum(tabac$probleme_pulmonaire) / nrow(tabac)),
nrow = 2, ncol = 2)
# Barplot avec toutes les barres sur le même graphique
barplot(as.vector(proportions),
main = "Proportions de : fumeurs, personnes avec problèmes pulmonaires",
xlab = "Catégories",
ylab = "Proportion",
ylim = c(0, 1),
space = 5,
width = c(0.01, 0.01, 0.01, 0.01),
col = c("#6262e3", "#6262e3", "#50977d", "#50977d"),
names.arg = c("Non fumeur", "Fumeur", "Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Ajouter des légendes pour indiquer les groupes de barres
legend("topright", legend = c("Fumeur", "Problème pulmonaire"), fill = c("#6262e3", "#50977d"))
attach(tabac)
paste("Il y a", sum((tabac$fumeur)/nrow(tabac))*100, "% de fumeurs")
prop.test(table(fumeur), conf.level=0.95)
prop.test(sum(tabac$fumeur), nrow(tabac), conf.level=0.95)
# H0 : p = 0.5
# H1 : p < 0.5
# alpha = 0.05
# Test bilatéral de proportion
prop.test(sum(tabac$fumeur), nrow(tabac), p = 0.5, alternative = "less", conf.level=0.95)
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(table_co)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence /colSums(table_contingence))
x <- c(10, 20)
y <- c(30, 40)
table(x, y)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
conditional_fumeur <- prop.table(table_contingence, margin=1)
conditional_fumeur
-table_contingence
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(t(table_contingence)))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(t(table_contingence)))
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(t(table_contingence)))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- table_contingence / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
(distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
rm(list=ls())
tabac <- read.csv("D:/Documents/Drive/Ecole/M1/S1/Analyse de données/Analyse univariée/tabac.csv", header = TRUE, sep = ",")
attach(tabac)
head(tabac)
str(tabac)
dim(tabac)
summary(tabac)
tabac$fumeur <- tabac$tabac > 0
# Fréquences
#Fréquences de fumeurs (TRUE = nombre de fumeurs, FALSE = nombre de non fumeurs):")
table(tabac$fumeur)
#Fréquences de problèmes pulmonaires (TRUE = nombre de personnes avec problèmes pulmonaires, FALSE = nombre de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)
# Proportions
#Proportions de fumeurs (TRUE = proportion de fumeurs, FALSE = proportion de non fumeurs):
table(tabac$fumeur)/nrow(tabac)
# Proportions de problèmes pulmonaires (TRUE = proportion de personnes avec problèmes pulmonaires, FALSE = proportion de personnes sans problèmes pulmonaires):
table(tabac$probleme_pulmonaire)/nrow(tabac)
# Barplot des proportions
proportions <- matrix(c(1 - sum(tabac$fumeur) / nrow(tabac), sum(tabac$fumeur) / nrow(tabac),
1 - sum(tabac$probleme_pulmonaire) / nrow(tabac), sum(tabac$probleme_pulmonaire) / nrow(tabac)),
nrow = 2, ncol = 2)
# Barplot avec toutes les barres sur le même graphique
barplot(as.vector(proportions),
main = "Proportions de : fumeurs, personnes avec problèmes pulmonaires",
xlab = "Catégories",
ylab = "Proportion",
ylim = c(0, 1),
space = 5,
width = c(0.01, 0.01, 0.01, 0.01),
col = c("#6262e3", "#6262e3", "#50977d", "#50977d"),
names.arg = c("Non fumeur", "Fumeur", "Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Ajouter des légendes pour indiquer les groupes de barres
legend("topright", legend = c("Fumeur", "Problème pulmonaire"), fill = c("#6262e3", "#50977d"))
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
attach(tabac)
(table_contingence <- table(tabac$fumeur, tabac$probleme_pulmonaire))
barplot(table_contingence, main="Distribution Jointe de Fumeurs et Problèmes Pulmonaires",
xlab="Fumeur", ylab="Problème Pulmonaire", legend=TRUE)
# Distribution jointe de fumeur et problème pulmonaire
table(tabac$fumeur, tabac$probleme_pulmonaire) / nrow(tabac)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
#plot
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
plot(factor(fumeur), factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
# Analogue
plot(factor(probleme_pulmonaire), factor(fumeur), xlab="probleme pulmonaire",ylab="fumeur")
plot(factor(fumeur), factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
# Distribution conditionnelle de fumeur sachant problème pulmonaire
barplot(table(tabac$fumeur, tabac$probleme_pulmonaire) / sum(tabac$probleme_pulmonaire),
main = "Distribution conditionnelle de fumeur sachant problème pulmonaire",
xlab = "Fumeur",
ylab = "Proportion",
ylim = c(0, 2),
space = 5,
width = c(0.01, 0.01),
col = c("#6262e3", "#50977d"),
names.arg = c("Non fumeur", "Fumeur"),
cex.names = 0.8)
# Distribution conditionnelle de problème pulmonaire sachant fumeur
barplot(table(tabac$fumeur, tabac$probleme_pulmonaire) / sum(tabac$fumeur),
main = "Distribution conditionnelle de problème pulmonaire sachant fumeur",
xlab = "Problème pulmonaire",
ylab = "Proportion",
ylim = c(0, 2),
space = 5,
width = c(0.01, 0.01),
col = c("#6262e3", "#50977d"),
names.arg = c("Sans pb pul.", "Avec pb pul."),
cex.names = 0.8)
# Distribution conditionnelle de fumeur sachant problème pulmonaire
(distrib_conditionnelle_1 <- table_contingence / rowSums(table_contingence))
# Distribution conditionnelle de problème pulmonaire sachant fumeur
t((distrib_conditionnelle_2 <- t(table_contingence) / colSums(table_contingence)))
plot(x = factor(fumeur), y = factor(probleme_pulmonaire), xlab="fumeur",ylab="probleme pulmonaire")
View(tabac)
t((distrib_conditionnelle_2 <- table_contingence/ colSums(table_contingence)))
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material.rstheme", apply = TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material-darker.rstheme", apply = TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/lusignan/RStudio-Material-Theme/main/material-palenight.rstheme", apply = TRUE)
setwd("C:/Users/thoma/Desktop/Github/Web-page-Phishing-Detection")
if (requireNamespace("thematic"))
thematic::thematic_rmd(font = "auto")
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
df <- read_csv("dataset_phishing.csv", show_col_types = FALSE)
df <- df[,-1]
head(df)
df$status <- as.factor(df$status)
ggplot(df, aes(x=status, fill=status)) +
geom_bar() +
labs(x="Classe", y="Nombre d'Observations", fill="Statut") +
ggtitle("Distribution des Classes de Phishing vs Légitimes")
# Histogramme pour 'length_url'
ggplot(df, aes(x=length_url)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
labs(x="Longueur de l'URL", y="Fréquence") +
ggtitle("Distribution de la Longueur des URL") +
theme_minimal()
# Boîte à moustaches pour 'length_url'
ggplot(df, aes(y=length_url, x=status, fill=status)) +
geom_boxplot() +
labs(x="Statut", y="Longueur de l'URL", fill="Statut") +
ggtitle("Boîte à Moustaches de la Longueur des URL par Statut") +
theme_minimal()
# Histogramme pour 'nb_hyphens'
ggplot(df, aes(x=nb_hyphens)) +
geom_histogram(bins=30, fill="green", alpha=0.7) +
labs(x="Nombre de Tirets", y="Fréquence") +
ggtitle("Distribution du Nombre de Tirets dans les URL") +
theme_minimal()
# Histogramme pour 'ratio_digits_url'
ggplot(df, aes(x=ratio_digits_url)) +
geom_histogram(bins=30, fill="red", alpha=0.7) +
labs(x="Ratio de Chiffres dans l'URL", y="Fréquence") +
ggtitle("Distribution du Ratio de Chiffres dans les URL") +
theme_minimal()
numeric_columns <- sapply(df, is.numeric)
cor_matrix <- cor(df[, numeric_columns], use = "complete.obs")
corrplot(cor_matrix, method = "circle", tl.cex = 0.6, cl.cex = 0.6)
indxTrain <- createDataPartition(df$status, p = 0.75, list = FALSE)
DTrain <- df[indxTrain, ]
DTest <- df[-indxTrain, ]
cat("Nombre d'observations dans l'ensemble d'entraînement:", nrow(DTrain), "\n")
cat("Nombre d'observations dans l'ensemble de test:", nrow(DTest), "\n")
ctrl <- trainControl(method = "none")
set.seed(123) # Pour la reproductibilité
fit.knn <- train(status ~ ., data = DTrain, method = "knn", tuneGrid = data.frame(k = 5), trControl = ctrl)
predictions <- predict(fit.knn, newdata = DTest)
# Matrice de confusion
confusionMatrix <- confusionMatrix(predictions, DTest$status)
print(confusionMatrix$table)
print(confusionMatrix$overall['Accuracy'])
errorRate <- 1 - confusionMatrix$overall['Accuracy']
print(errorRate)
if (requireNamespace("thematic"))
thematic::thematic_rmd(font = "auto")
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
df <- read_csv("dataset_phishing.csv", show_col_types = FALSE)
df <- df[,-1]
head(df)
df$status <- as.factor(df$status)
ggplot(df, aes(x=status, fill=status)) +
geom_bar() +
labs(x="Classe", y="Nombre d'Observations", fill="Statut") +
ggtitle("Distribution des Classes de Phishing vs Légitimes")
# Histogramme pour 'length_url'
ggplot(df, aes(x=length_url)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
labs(x="Longueur de l'URL", y="Fréquence") +
ggtitle("Distribution de la Longueur des URL") +
theme_minimal()
# Boîte à moustaches pour 'length_url'
ggplot(df, aes(y=length_url, x=status, fill=status)) +
geom_boxplot() +
labs(x="Statut", y="Longueur de l'URL", fill="Statut") +
ggtitle("Boîte à Moustaches de la Longueur des URL par Statut") +
theme_minimal()
# Histogramme pour 'nb_hyphens'
ggplot(df, aes(x=nb_hyphens)) +
geom_histogram(bins=30, fill="green", alpha=0.7) +
labs(x="Nombre de Tirets", y="Fréquence") +
ggtitle("Distribution du Nombre de Tirets dans les URL") +
theme_minimal()
# Histogramme pour 'ratio_digits_url'
ggplot(df, aes(x=ratio_digits_url)) +
geom_histogram(bins=30, fill="red", alpha=0.7) +
labs(x="Ratio de Chiffres dans l'URL", y="Fréquence") +
ggtitle("Distribution du Ratio de Chiffres dans les URL") +
theme_minimal()
numeric_columns <- sapply(df, is.numeric)
cor_matrix <- cor(df[, numeric_columns], use = "complete.obs")
corrplot(cor_matrix, method = "circle", tl.cex = 0.6, cl.cex = 0.6)
indxTrain <- createDataPartition(df$status, p = 0.75, list = FALSE)
gc()
if (requireNamespace("thematic"))
thematic::thematic_rmd(font = "auto")
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
df <- read_csv("dataset_phishing.csv", show_col_types = FALSE)
df <- df[,-1]
head(df)
df$status <- as.factor(df$status)
ggplot(df, aes(x=status, fill=status)) +
geom_bar() +
labs(x="Classe", y="Nombre d'Observations", fill="Statut") +
ggtitle("Distribution des Classes de Phishing vs Légitimes")
# Histogramme pour 'length_url'
ggplot(df, aes(x=length_url)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
labs(x="Longueur de l'URL", y="Fréquence") +
ggtitle("Distribution de la Longueur des URL") +
theme_minimal()
# Boîte à moustaches pour 'length_url'
ggplot(df, aes(y=length_url, x=status, fill=status)) +
geom_boxplot() +
labs(x="Statut", y="Longueur de l'URL", fill="Statut") +
ggtitle("Boîte à Moustaches de la Longueur des URL par Statut") +
theme_minimal()
# Histogramme pour 'nb_hyphens'
ggplot(df, aes(x=nb_hyphens)) +
geom_histogram(bins=30, fill="green", alpha=0.7) +
labs(x="Nombre de Tirets", y="Fréquence") +
ggtitle("Distribution du Nombre de Tirets dans les URL") +
theme_minimal()
# Histogramme pour 'ratio_digits_url'
ggplot(df, aes(x=ratio_digits_url)) +
geom_histogram(bins=30, fill="red", alpha=0.7) +
labs(x="Ratio de Chiffres dans l'URL", y="Fréquence") +
ggtitle("Distribution du Ratio de Chiffres dans les URL") +
theme_minimal()
numeric_columns <- sapply(df, is.numeric)
cor_matrix <- cor(df[, numeric_columns], use = "complete.obs")
corrplot(cor_matrix, method = "circle", tl.cex = 0.6, cl.cex = 0.6)
indxTrain <- createDataPartition(df$status, p = 0.75, list = FALSE)
DTrain <- df[indxTrain, ]
DTest <- df[-indxTrain, ]
cat("Nombre d'observations dans l'ensemble d'entraînement:", nrow(DTrain), "\n")
cat("Nombre d'observations dans l'ensemble de test:", nrow(DTest), "\n")
ctrl <- trainControl(method = "none")
set.seed(123) # Pour la reproductibilité
fit.knn <- train(status ~ ., data = DTrain, method = "knn", tuneGrid = data.frame(k = 5), trControl = ctrl, na.action = na.omit)
predictions <- predict(fit.knn, newdata = DTest)
gc()
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
df <- read_csv("dataset_phishing.csv", show_col_types = FALSE)
df <- df[,-1]
View(df)
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
df <- read_csv("dataset_phishing.csv", show_col_types = FALSE)
df <- df[,-1]
df$status <- as.factor(df$status)
indxTrain <- createDataPartition(df$status, p = 0.75, list = FALSE)
DTrain <- df[indxTrain, ]
DTest <- df[-indxTrain, ]
cat("Nombre d'observations dans l'ensemble d'entraînement:", nrow(DTrain), "\n")
cat("Nombre d'observations dans l'ensemble de test:", nrow(DTest), "\n")
# Matrice de confusion
confusionMatrix <- confusionMatrix(predictions, DTest$status)
set.seed(123)
ctrl <- trainControl(method = "none")
fit.knn <- train(status ~ .,
data = DTrain,
method = "knn",
tuneGrid = data.frame(k = 5),
trControl = ctrl,
na.action = na.omit)
predictions <- predict(fit.knn, newdata = DTest)
# Matrice de confusion
confusionMatrix <- confusionMatrix(predictions, DTest$status)
print(confusionMatrix$table)
print(confusionMatrix$overall['Accuracy'])
errorRate <- 1 - confusionMatrix$overall['Accuracy']
print(errorRate)
View(df)
ctrl <- trainControl(method = "cv", number = 10)
knnFit <- train(status ~ ., data = DTrain, method = "knn", trControl = ctrl, tuneLength = 20, preProcess = c("center", "scale"),
na.action = na.omit)
ctrl <- trainControl(method = "cv", number = 10)
knnFit <- train(status ~ .,
data = DTrain,
method = "knn",
trControl = ctrl,
tuneLength = 20,
preProcess = c("center", "scale"),
na.action = na.omit)
plot(knnFit)
print(knnFit$results)
print(knnFit$bestTune)
bestK <- knnFit$bestTune$k
predictionsBestK <- predict(knnFit, newdata = DTest)
confusionMatrixBestK <- confusionMatrix(predictionsBestK, DTest$status)
errorRateBestK <- 1 - confusionMatrixBestK$overall['Accuracy']
print(errorRateBestK)
knitr::opts_chunk$set(echo = TRUE)
ggplot(Dtrain, aes(x=age, y=income))+
geom_point(size=2, aes(pch=bad_client_target,col=bad_client_target))
ctrl <- trainControl(method = "cv", number = 20)
knnFit <- train(status ~ .,
data = DTrain,
method = "knn",
trControl = ctrl,
tuneLength = 20,
preProcess = c("center", "scale"),
na.action = na.omit)
plot(knnFit)
print(knnFit$results)
print(knnFit$bestTune)
bestK <- knnFit$bestTune$k
predictionsBestK <- predict(knnFit, newdata = DTest)
confusionMatrixBestK <- confusionMatrix(predictionsBestK, DTest$status)
errorRateBestK <- 1 - confusionMatrixBestK$overall['Accuracy']
print(errorRateBestK)
View(df)
ctrl <- trainControl(method = "cv", number = 20)
knnFit <- train(status ~ .,
data = DTrain,
method = "knn",
trControl = ctrl,
tuneLength = 20,
preProcess = c("center", "scale"),
na.action = na.omit)
gc()
if (requireNamespace("thematic"))
thematic::thematic_rmd(font = "auto")
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(ggcorrplot)
library(caret)
df <- read_csv("dataset_phishing.csv", show_col_types = FALSE)
df <- df[,-1]
df$status <- as.factor(df$status)
head(df)
df$status <- as.factor(df$status)
ggplot(df, aes(x=status, fill=status)) +
geom_bar() +
labs(x="Classe", y="Nombre d'Observations", fill="Statut") +
ggtitle("Distribution des Classes de Phishing vs Légitimes")
# Histogramme pour 'length_url'
ggplot(df, aes(x=length_url)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
labs(x="Longueur de l'URL", y="Fréquence") +
ggtitle("Distribution de la Longueur des URL") +
theme_minimal()
# Boîte à moustaches pour 'length_url'
ggplot(df, aes(y=length_url, x=status, fill=status)) +
geom_boxplot() +
labs(x="Statut", y="Longueur de l'URL", fill="Statut") +
ggtitle("Boîte à Moustaches de la Longueur des URL par Statut") +
theme_minimal()
# Histogramme pour 'nb_hyphens'
ggplot(df, aes(x=nb_hyphens)) +
geom_histogram(bins=30, fill="green", alpha=0.7) +
labs(x="Nombre de Tirets", y="Fréquence") +
ggtitle("Distribution du Nombre de Tirets dans les URL") +
theme_minimal()
# Histogramme pour 'ratio_digits_url'
ggplot(df, aes(x=ratio_digits_url)) +
geom_histogram(bins=30, fill="red", alpha=0.7) +
labs(x="Ratio de Chiffres dans l'URL", y="Fréquence") +
ggtitle("Distribution du Ratio de Chiffres dans les URL") +
theme_minimal()
numeric_columns <- sapply(df, is.numeric)
cor_matrix <- cor(df[, numeric_columns], use = "complete.obs")
corrplot(cor_matrix, method = "circle", tl.cex = 0.6, cl.cex = 0.6)
indxTrain <- createDataPartition(df$status, p = 0.75, list = FALSE)
DTrain <- df[indxTrain, ]
DTest <- df[-indxTrain, ]
cat("Nombre d'observations dans l'ensemble d'entraînement:", nrow(DTrain), "\n")
cat("Nombre d'observations dans l'ensemble de test:", nrow(DTest), "\n")
set.seed(123)
ctrl <- trainControl(method = "none")
fit.knn <- train(status ~ .,
data = DTrain,
method = "knn",
tuneGrid = data.frame(k = 5),
trControl = ctrl,
na.action = na.omit)
predictions <- predict(fit.knn, newdata = DTest)
confusionMatrix <- confusionMatrix(predictions, DTest$status)
print(confusionMatrix$table)
print(confusionMatrix$overall['Accuracy'])
errorRate <- 1 - confusionMatrix$overall['Accuracy']
print(errorRate)
ctrl <- trainControl(method = "cv", number = 20)
knnFit <- train(status ~ .,
data = DTrain,
method = "knn",
trControl = ctrl,
tuneLength = 20,
preProcess = c("center", "scale"),
na.action = na.omit)
plot(knnFit)
print(knnFit$results)
print(knnFit$bestTune)
bestK <- knnFit$bestTune$k
predictionsBestK <- predict(knnFit, newdata = DTest)
confusionMatrixBestK <- confusionMatrix(predictionsBestK, DTest$status)
errorRateBestK <- 1 - confusionMatrixBestK$overall['Accuracy']
print(errorRateBestK)
ctrl <- trainControl(method = "cv", number = 10)
knnFit <- train(status ~ .,
data = DTrain,
method = "knn",
trControl = ctrl,
tuneLength = 40,
preProcess = c("center", "scale"),
na.action = na.omit)
plot(knnFit)
print(knnFit$results)
print(knnFit$bestTune)
bestK <- knnFit$bestTune$k
predictionsBestK <- predict(knnFit, newdata = DTest)
confusionMatrixBestK <- confusionMatrix(predictionsBestK, DTest$status)
errorRateBestK <- 1 - confusionMatrixBestK$overall['Accuracy']
print(errorRateBestK)
